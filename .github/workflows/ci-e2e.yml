name: CI â€“ E2E Smoke

on:
  push:
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ircset
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d ircset"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    env:
      NODE_ENV: test
      # App config
      PORT: 3005
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/ircset
      METRICS_TOKEN: secret
      MEMBERSHIP_ENFORCE: "false" # allow final upload in CI
      CORS_ORIGINS: http://localhost:5173
      BCRYPT_ROUNDS: "10"
      SESSION_TTL_SECONDS: "3600"
      # Force public npm registry to avoid 403s
      NPM_CONFIG_REGISTRY: https://registry.npmjs.org/

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install server deps
        working-directory: server
        run: npm ci --registry=https://registry.npmjs.org/

      - name: Create schema
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          -- Create schema (your schema.sql content should be in repo; if not, inline it here)
          \i server/sql/schema.sql
          SQL

      - name: Start API
        working-directory: server
        run: |
          # Start the server in background; adapt if you use a dev script
          node src/index.js & echo $! > ../server.pid
          # wait until healthy
          for i in {1..60}; do
            curl -sf http://localhost:${PORT}/healthz && break
            sleep 1
          done

      - name: Smoke: register admin user (as author), then promote to admin
        run: |
          curl -s http://localhost:${PORT}/csrf-token
          curl -s -c admin.txt -b admin.txt -H "Content-Type: application/json" \
            -d '{"email":"admin1@example.com","name":"Admin One","password":"StrongP@ssw0rd!"}' \
            http://localhost:${PORT}/auth/register
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          UPDATE users SET role='admin' WHERE email='admin1@example.com';
          SQL

      - name: Smoke: admin login & basic admin flows
        run: |
          # Login
          curl -s -c admin.txt -b admin.txt -H "Content-Type: application/json" \
            -d '{"email":"admin1@example.com","password":"StrongP@ssw0rd!"}' \
            http://localhost:${PORT}/auth/login | tee /dev/stderr
          CSRF=$(awk '$6=="csrf-token"{print $7}' admin.txt | tail -n1)

          # Create reviewer
          curl -s -c admin.txt -b admin.txt -H "Content-Type: application/json" -H "X-CSRF-Token: $CSRF" \
            -d '{"email":"reviewer1@example.com","name":"Reviewer One","password":"StrongP@ssw0rd!","role":"reviewer","categories":["A"]}' \
            http://localhost:${PORT}/admin/users | tee /dev/stderr

          # Create decision maker
          curl -s -c admin.txt -b admin.txt -H "Content-Type: application/json" -H "X-CSRF-Token: $CSRF" \
            -d '{"email":"dm1@example.com","name":"DM One","password":"StrongP@ssw0rd!","role":"decision_maker","categories":["A"]}' \
            http://localhost:${PORT}/admin/users | tee /dev/stderr

      - name: Smoke: author create submission
        run: |
          # Register author
          curl -s http://localhost:${PORT}/csrf-token
          curl -s -c author.txt -b author.txt -H "Content-Type: application/json" \
            -d '{"email":"author1@example.com","name":"Author One","password":"StrongP@ssw0rd!"}' \
            http://localhost:${PORT}/auth/register

          # Login author
          curl -s -c author.txt -b author.txt -H "Content-Type: application/json" \
            -d '{"email":"author1@example.com","password":"StrongP@ssw0rd!"}' \
            http://localhost:${PORT}/auth/login

          # Make a tiny PDF
          cat > /tmp/x.pdf <<'PDF'
          %PDF-1.4
          1 0 obj <<>> endobj
          xref
          0 1
          0000000000 65535 f 
          trailer <<>>
          startxref
          0
          %%EOF
          PDF

          # Create submission
          CSRF=$(awk '$6=="csrf-token"{print $7}' author.txt | tail -n1)
          curl -s -c author.txt -b author.txt -H "X-CSRF-Token: $CSRF" \
            -F "title=Seed Paper A" -F "category_id=A" -F "pdf=@/tmp/x.pdf;type=application/pdf" \
            http://localhost:${PORT}/submissions | tee /dev/stderr

      - name: Smoke: chair/admin assigns reviewer, reviewer submits, DM decides, author uploads final
        run: |
          # Admin acts as chair (your requireChair allows admin)
          CSRF=$(awk '$6=="csrf-token"{print $7}' admin.txt | tail -n1)

          # Find submission id
          SUB_ID=$(curl -s -c admin.txt -b admin.txt "http://localhost:${PORT}/chair/submissions?category=A" | jq -r '.items[0].id')
          echo "SUB_ID=$SUB_ID"

          # Assign reviewer (id = the reviewer we created; fetch id)
          REV_ID=$(psql "$DATABASE_URL" -At -c "SELECT id FROM users WHERE email='reviewer1@example.com' LIMIT 1;")
          curl -s -c admin.txt -b admin.txt -H "Content-Type: application/json" -H "X-CSRF-Token: $CSRF" \
            -d "{\"reviewers\":[$REV_ID],\"due_at\":\"2030-01-01\"}" \
            http://localhost:${PORT}/chair/submissions/$SUB_ID/assign | tee /dev/stderr

          # Reviewer logs in & submits review
          curl -s -c rev.txt -b rev.txt -H "Content-Type: application/json" \
            -d '{"email":"reviewer1@example.com","password":"StrongP@ssw0rd!"}' \
            http://localhost:${PORT}/auth/login
          curl -s -c rev.txt -b rev.txt -H "Content-Type: application/json" \
            -d '{"score_overall":8.5,"comments_for_author":"Looks good","comments_confidential":"n/a"}' \
            http://localhost:${PORT}/reviewer/submissions/$SUB_ID/reviews | tee /dev/stderr

          # DM decides
          curl -s -c dm.txt -b dm.txt -H "Content-Type: application/json" \
            -d '{"email":"dm1@example.com","password":"StrongP@ssw0rd!"}' \
            http://localhost:${PORT}/auth/login
          curl -s -c dm.txt -b dm.txt -H "Content-Type: application/json" \
            -d '{"decision":"accepted","reason":"CI accept"}' \
            http://localhost:${PORT}/decisions/$SUB_ID | tee /dev/stderr

          # Author uploads final (membership gate disabled in CI)
          CSRF=$(awk '$6=="csrf-token"{print $7}' author.txt | tail -n1)
          curl -s -c author.txt -b author.txt -H "X-CSRF-Token: $CSRF" \
            -F "pdf=@/tmp/x.pdf;type=application/pdf" \
            http://localhost:${PORT}/submissions/$SUB_ID/final | tee /dev/stderr

          # Download final (200)
          curl -s -o /dev/null -w "%{http_code}\n" -c author.txt -b author.txt \
            "http://localhost:${PORT}/submissions/$SUB_ID/final.pdf?dl=1" | tee /dev/stderr

      - name: Metrics gated
        run: |
          curl -s -H "Authorization: Bearer ${METRICS_TOKEN}" http://localhost:${PORT}/metrics | head -n 20

      - name: Recent audit logs
        run: |
          # Only dump if table exists
          psql "$DATABASE_URL" -Atc "SELECT to_regclass('public.audit_logs');" | grep -q audit_logs && \
            psql "$DATABASE_URL" -c "SELECT created_at,action,severity,trace_id FROM audit_logs ORDER BY created_at DESC LIMIT 20;" || \
            echo "audit_logs not found (skipping)."

      - name: Stop API
        if: always()
        run: |
          if [ -f server.pid ]; then kill -9 $(cat server.pid) || true; fi
